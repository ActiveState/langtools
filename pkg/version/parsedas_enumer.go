// Code generated by "enumer -type ParsedAs ."; DO NOT EDIT.

//
package version

import (
	"fmt"
)

const _ParsedAsName = "UnknownGenericSemVerPerlDecimalPerlVStringPHPPythonLegacyPythonPEP440Ruby"

var _ParsedAsIndex = [...]uint8{0, 7, 14, 20, 31, 42, 45, 57, 69, 73}

func (i ParsedAs) String() string {
	if i < 0 || i >= ParsedAs(len(_ParsedAsIndex)-1) {
		return fmt.Sprintf("ParsedAs(%d)", i)
	}
	return _ParsedAsName[_ParsedAsIndex[i]:_ParsedAsIndex[i+1]]
}

var _ParsedAsValues = []ParsedAs{0, 1, 2, 3, 4, 5, 6, 7, 8}

var _ParsedAsNameToValueMap = map[string]ParsedAs{
	_ParsedAsName[0:7]:   0,
	_ParsedAsName[7:14]:  1,
	_ParsedAsName[14:20]: 2,
	_ParsedAsName[20:31]: 3,
	_ParsedAsName[31:42]: 4,
	_ParsedAsName[42:45]: 5,
	_ParsedAsName[45:57]: 6,
	_ParsedAsName[57:69]: 7,
	_ParsedAsName[69:73]: 8,
}

// ParsedAsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ParsedAsString(s string) (ParsedAs, error) {
	if val, ok := _ParsedAsNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ParsedAs values", s)
}

// ParsedAsValues returns all values of the enum
func ParsedAsValues() []ParsedAs {
	return _ParsedAsValues
}

// IsAParsedAs returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ParsedAs) IsAParsedAs() bool {
	for _, v := range _ParsedAsValues {
		if i == v {
			return true
		}
	}
	return false
}
